apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq-config
  namespace: microservices
data:
  enabled_plugins: |
    [rabbitmq_management,rabbitmq_prometheus,rabbitmq_shovel,rabbitmq_shovel_management].
  rabbitmq.conf: |
    default_user = admin
    default_pass = admin123
    default_vhost = /
    default_user_tags.administrator = true
    default_permissions.configure = .*
    default_permissions.read = .*
    default_permissions.write = .*
    loopback_users.guest = false
    listeners.tcp.default = 5672
    management.tcp.port = 15672
    management.tcp.ip = 0.0.0.0
    prometheus.tcp.port = 15692
    cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 30
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    queue_master_locator = min-masters
---
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq-secrets
  namespace: microservices
type: Opaque
data:
  # RABBITMQ_DEFAULT_USER: admin (base64 encoded)
  RABBITMQ_DEFAULT_USER: YWRtaW4=
  # RABBITMQ_DEFAULT_PASS: admin123 (base64 encoded)
  RABBITMQ_DEFAULT_PASS: YWRtaW4xMjM=
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rabbitmq-pvc
  namespace: microservices
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: microservices
spec:
  serviceName: rabbitmq-service
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      serviceAccountName: rabbitmq-sa
      containers:
      - name: rabbitmq
        image: rabbitmq:3-management-alpine
        ports:
        - containerPort: 5672
          name: amqp
        - containerPort: 15672
          name: management
        - containerPort: 15692
          name: prometheus
        env:
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secrets
              key: RABBITMQ_DEFAULT_USER
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secrets
              key: RABBITMQ_DEFAULT_PASS
        - name: RABBITMQ_ERLANG_COOKIE
          value: "mycookie"
        - name: K8S_SERVICE_NAME
          value: "rabbitmq-service"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: RABBITMQ_USE_LONGNAME
          value: "true"
        - name: RABBITMQ_NODENAME
          value: "rabbit@$(POD_NAME).$(K8S_SERVICE_NAME).$(POD_NAMESPACE).svc.cluster.local"
        - name: RABBITMQ_CONFIG_FILE
          value: "/etc/rabbitmq/rabbitmq"
        volumeMounts:
        - name: rabbitmq-storage
          mountPath: /var/lib/rabbitmq
        - name: rabbitmq-config
          mountPath: /etc/rabbitmq
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - rabbitmq-diagnostics
            - status
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 15
        readinessProbe:
          exec:
            command:
            - rabbitmq-diagnostics
            - ping
          initialDelaySeconds: 20
          periodSeconds: 60
          timeoutSeconds: 10
      volumes:
      - name: rabbitmq-storage
        persistentVolumeClaim:
          claimName: rabbitmq-pvc
      - name: rabbitmq-config
        configMap:
          name: rabbitmq-config
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
  namespace: microservices
spec:
  clusterIP: None
  selector:
    app: rabbitmq
  ports:
  - port: 5672
    targetPort: 5672
    name: amqp
  - port: 15672
    targetPort: 15672
    name: management
  - port: 15692
    targetPort: 15692
    name: prometheus
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-management
  namespace: microservices
spec:
  type: NodePort
  selector:
    app: rabbitmq
  ports:
  - port: 15672
    targetPort: 15672
    nodePort: 31672
    name: management
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rabbitmq-sa
  namespace: microservices
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: rabbitmq-role
  namespace: microservices
rules:
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: rabbitmq-rolebinding
  namespace: microservices
subjects:
- kind: ServiceAccount
  name: rabbitmq-sa
  namespace: microservices
roleRef:
  kind: Role
  name: rabbitmq-role
  apiGroup: rbac.authorization.k8s.io
